{"name":"Blink Eye and Simulate PC Keyboard","tagline":"Combining OpenCV Eye blink detect code with the simulation of keyboard","body":"USAGE: run the build.sh shell script\r\n\r\nAuthors: Keshav Sharma & Alizishaan Khatri\r\n\r\nWritten the Java code and a portion of the C code. A portion of the C code has been borrowed from \"github.com/maz/blinking-angel\"\r\n\r\nThe entirety of the C code is licensed under the GPL.\r\nThe Java code is licensed under the GPL.\r\n\r\nOverview\r\n========\r\nThe system uses the implementation of First in first out queue which is constantly updated by the c code when a series of blinks is detected and an alphanumerical digit is processed from the blinks using hexadecimal encoding format. The java part than takes out the first digit in the queue and prints to the desired location which is pointed by the mouse pointer .\r\n\r\nSome portion of the C code was written by author Nash. The original contents of the file are below.\r\nAuthor:  Nash\r\nReal Time Eye Tracking and Blink Detection\r\nThis project implements the algorithm (with small modifications) described in paper:\r\n\r\nReal Time Eye Tracking and Blink Detection\r\nMichael Chau and Margrit Betke\r\nhttp://www.cs.bu.edu/techreports/pdf/2005-012-blink-detection.pdf\r\n\r\nOverview\r\nThis system automatically locate the user's eye by detecting eye blinks. Motion analysis \r\ntechniques are used in this stage, followed by online creation of the open eye template. \r\nThe open eye template is used to locate the user's eye in the subsequent frames with \r\ntemplate matching. Blink detection is performed using motion analysis techniques. \r\n\r\nSince the operation requires extensive amount of computation, the search region is \r\nrestricted in a small search window around the user's eye. This method will drastically \r\nreduces the computation needed thus making the system running smoothly in real time.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}